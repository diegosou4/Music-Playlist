// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Track {
  id        String   @id @default(cuid())
  name      String
  url       String
  image     String?
  duration  Int
  isPublic  Boolean  @default(true)
  isActive  Boolean?  @default(true)
  popularity Int      @default(0)
  artistId  String
  artist    Artist? @relation(fields: [artistId], references: [id])
  albumId   String
  album     Album @relation(fields: [albumId], references: [id])
  genreId   String
  genre     Genre @relation(fields: [genreId], references: [id])
  lyrics    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  playlists PlaylistTrack[]
  
}

model Artist {
  id        String   @id @default(cuid())
  name      String
  url       String?
  image     String?
  biography String?
  isPublic  Boolean  @default(true)
  isActive  Boolean  @default(true)
  popularity Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tracks    Track[]
}


model Album{
  id      String   @id @default(cuid())
  name    String
  url     String?
  image   String?
  artist  String
  genreId String
  genre   Genre @relation(fields: [genreId], references: [id])
  tracks  Track[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic Boolean  @default(true)
  isActive Boolean  @default(true)
  popularity Int      @default(0)
}

model Playlist {
  id          String         @id @default(cuid())
  name        String
  url         String?
  image       String?
  description String?
  isPublic    Boolean        @default(false)
  isActive    Boolean        @default(true)
  popularity  Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  tracks      PlaylistTrack[]
}


model PlaylistTrack {
  track  Track  @relation(fields: [trackId], references: [id])
  trackId String 
  playlist Playlist @relation(fields: [playlistId], references: [id])
  playlistId String

  @@id([trackId, playlistId])
}

model User {
  id        String   @id @default(cuid())
  name     String
  lastName String
  playlist Playlist[]
  auth      UserAuth?
}

model UserAuth {
  id       String   @id @default(cuid())
  userId    String   @unique
  username  String   @unique
  password String
  email    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Genre{

  id       String   @id @default(cuid())
  name      String
  tracks    Track[]
  albums    Album[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}